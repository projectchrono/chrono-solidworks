#-------------------------------------------------------------------------------
#
# This file shows how to simulate collision shapes
#
# Author: Alessandro Tasora
#
# REMARK: this is part of Chrono::Solidworks add-in
#     - it assumes that you exported the .asm in this directory using the add-in
#     - PyChrono must be installed in your Python environment
#-------------------------------------------------------------------------------

import sys
import pychrono as chrono
import pychrono.irrlicht as chronoirr

print("Demo program that shows how to use the SolidWorks add-in.")
print(" 1) use the SolidWorks Add-in, load the .SLDASM,")
print(" 2) from the Add-in, 'save as Python..' in a directory X")
print(" 3) modify m_datapath in this file")
print(" 3) modify ImportSolidWorksSystem(..) to match what you exported")
print(" 4) move this .py file in directory X and execute it.")

# Create Chrono physical system, non-smooth contact method
my_system = chrono.ChSystemNSC()

# Set collision detection engine
my_system.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)

# Set the default outward/inward shape margins for collision detection,
# this is epecially important for very large or very small objects.
# This is a global setting to be put BEFORE creating objects/systems
chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.005)
chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.005)


# Load the file generated by the SolidWorks CAD plugin and add it to the ChSystem.
# NB: modify the argument of ImportSolidWorksSystem() to match what you exported.
print ("Loading C::E scene...")

exported_items = chrono.ImportSolidWorksSystem('./portal.py')

print ("...loading done!")

# Print exported items
for my_item in exported_items:
    print (my_item.GetName())

# Add items to the physical system
for my_item in exported_items:
    my_system.Add(my_item)


# Create a contact material (surface property) to share between all objects.
brick_material = chrono.ChContactMaterialNSC()
brick_material.SetFriction(0.6)
#brick_material.SetRestitution(0)
#brick_material.SetDampingF(0.05)
#brick_material.SetCompliance (0.000000003)
#brick_material.SetComplianceT(0.000000001)

for my_body in my_system.GetBodies(): 
    if my_body.GetCollisionModel():
        my_body.GetCollisionModel().SetAllShapesMaterial(brick_material)

# Customize bodies color
for my_body in my_system.GetBodies():
    if my_body.GetVisualModel():
        my_body.GetVisualShape(0).SetColor(chrono.ChColor(0.2, 0.2, 0.2))


# Create motion between table and ground:
my_floor = my_system.SearchBody('floor^portal-1')
if not my_floor:
    sys.exit('Error: cannot find floor  from its name in the C::E system!')

my_ground = my_system.SearchBody('SLDW_GROUND')
if not my_ground:
    sys.exit('Error: cannot find ground  from its name in the C::E system!')

# Make the shaking motion
my_floor.SetFixed(False)
link_shaker = chrono.ChLinkLockLock()
link_shaker.Initialize(my_floor, my_ground, chrono.ChFramed())
my_system.Add(link_shaker)

my_functA = chrono.ChFunctionSine(1.4, 0.06, 0)
my_functB = chrono.ChFunctionSine(0.1, 1, 0)
my_funct = chrono.ChFunctionOperator()
my_funct.SetFirstOperandFunction(my_functA)
my_funct.SetSecondOperandFunction(my_functB)
my_funct.SetOperationType(chrono.ChFunctionOperator.MUL)
link_shaker.SetMotionX(my_funct)

# Create the Irrlicht visualization
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(my_system)
vis.SetWindowSize(1024, 768)
vis.SetWindowTitle('Test')
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataPath() + 'logo_pychrono_alpha.png')
vis.AddSkyBox()
vis.AddCamera(chrono.ChVector3d(0, 1, 2))
vis.AddTypicalLights()

vis.EnableCollisionShapeDrawing(True)

timestep = 0.001

# Simulation loop
while vis.Run():
    vis.BeginScene()
    vis.Render()
    vis.EndScene()
    my_system.DoStepDynamics(timestep)