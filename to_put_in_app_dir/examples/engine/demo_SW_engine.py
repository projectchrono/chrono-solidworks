#-------------------------------------------------------------------------------
#
# This file shows how to simulate a four cylinder engine
#
# Author: Alessandro Tasora
#
# REMARK: this is part of Chrono::Solidworks add-in
#     - it assumes that you exported the .asm in this directory using the add-in
#     - PyChrono must be installed in your Python environment
#-------------------------------------------------------------------------------


import sys
import pychrono as chrono
import pychrono.irrlicht as chronoirr

print("Demo program that shows how to use the SolidWorks add-in.")
print(" 1) use the SolidWorks Add-in, load the .SLDASM,")
print(" 2) from the Add-in, 'save as Python..' in a directory X")
print(" 3) modify m_datapath in this file")
print(" 3) modify ImportSolidWorksSystem(..) to match what you exported")
print(" 4) move this .py file in directory X and execute it.")

# Create Chrono physical system
my_system = chrono.ChSystemNSC()
my_system.SetGravitationalAcceleration(chrono.ChVector3d(0,-9.81,0))

#  Load the file generated by the SolidWorks CAD plugin
#  and add it to the ChSystem.
print ("Loading C::E scene...")

exported_items = chrono.ImportSolidWorksSystem('./engine.py')

print ("...loading done!")

# Print exported items
for my_item in exported_items:
    print (my_item.GetName())

# Add items to the physical system
for my_item in exported_items:
    my_system.Add(my_item)


# Optionally set some solver parameters.
my_solver = chrono.ChSolverBB()
my_solver.SetMaxIterations(600)
my_system.SetSolver(my_solver)

# Fetch a ChMarker from its name (it is a 'Coordinate system' in
#  the SolidWorks interface)

my_marker = my_system.SearchMarker('Marker_shaft')
if not my_marker :
    sys.exit('Error: cannot find marker from its name in the C::E system!')


# Fetch two ChBodyAuxRef objects (the ground, the shaft) from
# their names. Names are as they are named in SolidWorks - see also the dump of
# my_system object with my_system.ShowHierarchy(chrono.GetLog()) if needed)
#   Note.. here we must upcast because Search() returns generic shared
# pointer to a base class ChPhysicsItem, so we use CastToXXYYZZ()
# my_shaft = chrono.CastToChBodyAuxRefShared(my_system.Search('Crankshaft-1'))
# Or use the specialized SearchBody().

my_shaft = my_system.SearchBody('Crankshaft-1')
if not my_shaft :
    sys.exit('Error: cannot find shaft  from its name in the C::E system!')

my_ground = my_system.SearchBody('SLDW_GROUND')
if not my_ground :
    sys.exit('Error: cannot find ground from its name in the C::E system!')


# Create an engine along the Z direction of the coordsystem specified by
# the marker, and acting between shaft and ground
revolute_frame = my_marker.GetAbsFrame()
link_motor = chrono.ChLinkMotorRotationSpeed()
link_motor.Initialize(my_shaft, my_ground, revolute_frame)
link_motor.SetSpindleConstraint(chrono.ChLinkMotorRotationSpeed.SpindleConstraint_CYLINDRICAL)# Set_shaft_mode(chrono.ChLinkEngine.ENG_SHAFT_PRISM)
link_motor.SetMotorFunction(chrono.ChFunctionConst(1.0*chrono.CH_2PI))  # 1.0 Hz to rad/s
my_system.Add(link_motor)


# Create the Irrlicht visualization
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(my_system)
vis.SetWindowSize(1024,768)
vis.SetWindowTitle('Test')
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataPath() + 'logo_pychrono_alpha.png')
vis.AddSkyBox()
vis.AddCamera(chrono.ChVector3d(0.5, 0.5, 0.5))
vis.AddTypicalLights()
    
m_realtime_timer = chrono.ChRealtimeStepTimer()
m_timestep = 0.01

# Simulation loop
while vis.Run():
    vis.BeginScene()
    vis.Render()
    vis.EndScene()
    my_system.DoStepDynamics(m_timestep)
    m_realtime_timer.Spin(m_timestep)