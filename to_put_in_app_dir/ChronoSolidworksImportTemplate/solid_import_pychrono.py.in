# =============================================================================
# PROJECT CHRONO - http://projectchrono.org
#
# Copyright (c) 2014 projectchrono.org
# All rights reserved.
#
# Use of this source code is governed by a BSD-style license that can be found
# in the LICENSE file at the top level of the distribution and at
# http://projectchrono.org/license-chrono.txt.
#
# =============================================================================
# Template project for loading a Python model exported by Chrono::Solidworks
# into a PyChrono simulation.
# =============================================================================

import pychrono as chrono
import pychrono.irrlicht as chronoirr

# The path to the Chrono data directory containing various assets (meshes, textures, data files)
# is automatically set, relative to the default location of this demo.
# If running from a different directory, you must change the path to the data directory with: 
#chrono.SetChronoDataPath('path/to/data')


# Create a Chrono physical system
sys = chrono.ChSystemNSC()
sys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)

# Customize collision envelopes and margin, if necessary
# This is expecially important for very large or very small objects 
# Do this before creating shapes
#chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.001)
#chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.001)


# Load the file generated by the SolidWorks CAD plugin and add it to the system
print ("Loading Chrono scene...")

exported_items = chrono.ImportSolidWorksSystem('@SOLIDWORKS_EXPORTED_FILE_PY@') # ENTER THE NAME OF SLDW EXPORT HERE

print ("...done!")

# Add items to the physical system
for item in exported_items:
    sys.Add(item)

# Print exported items
print("List of items added to system:")
for item in exported_items:
    print ("   " + item.GetName())

# Create the Irrlicht visualization system
vis = chronoirr.ChVisualSystemIrrlicht()
vis.SetWindowSize(1024, 768)
vis.SetWindowTitle('ChronoSolidworksImportPy')
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
vis.AddSkyBox()
vis.AddTypicalLights()
vis.AddCamera(chrono.ChVector3d(2, 2, 2), chrono.ChVector3d(0, 0, 0))
vis.AttachSystem(sys)

vis.EnableCollisionShapeDrawing(True)


# Simulation loop
realtime_timer = chrono.ChRealtimeStepTimer()
timestep = 0.01

sys.SetSolverType(chrono.ChSolver.Type_BARZILAIBORWEIN)
sys.GetSolver().AsIterative().SetMaxIterations(400)

while vis.Run():
    # Render scene
    vis.BeginScene()
    vis.Render()
    vis.EndScene()

    # Perform the integration stpe
    sys.DoStepDynamics(timestep)

    # Spin in place to maintain soft real-time
    realtime_timer.Spin(timestep)
