// =============================================================================
// PROJECT CHRONO - http://projectchrono.org
//
// Copyright (c) 2014 projectchrono.org
// All rights reserved.
//
// Use of this source code is governed by a BSD-style license that can be found
// in the LICENSE file at the top level of the distribution and at
// http://projectchrono.org/license-chrono.txt.
//
// =============================================================================
// Template project for loading a C++ model exported by Chrono::Solidworks
// into a Chrono C++ simulation.
// =============================================================================

#include "chrono/physics/ChSystemNSC.h"
#include "chrono/core/ChRealtimeStep.h"
#include "chrono_irrlicht/ChVisualSystemIrrlicht.h"
#include SOLIDWORKS_EXPORTED_HEADER

// Use the namespace of Chrono
using namespace chrono;
using namespace chrono::irrlicht;

int main(int argc, char* argv[]) {
    std::cout << "Copyright (c) 2024 projectchrono.org\nChrono version: " << CHRONO_VERSION << std::endl;

    // Set path to Chrono data directory
    SetChronoDataPath(CHRONO_DATA_DIR);
    
    // Create a Chrono physical system
    ChSystemNSC sys;
    sys.SetCollisionSystemType(chrono::ChCollisionSystem::Type::BULLET);

    // Customize collision envelopes and margin, if necessary
    // This is expecially important for very large or very small objects 
    // Do this before creating shapes
    //ChCollisionModel::SetDefaultSuggestedEnvelope(0.001)
    //ChCollisionModel::SetDefaultSuggestedMargin(0.001)

    // Load the file generated by the SolidWorks CAD plugin and add it to the system
    std::unordered_map<std::string, std::shared_ptr<chrono::ChFunction>> motfun_map;
    try {
        ImportSolidworksSystemCpp(sys, &motfun_map);
    }
    catch (const std::exception& exc) {
        std::cout << exc.what() << std::endl;
    }

    // Log out all the names of the items inserted in the system
    sys.ShowHierarchy(std::cout);

    // Create the Irrlicht visualization system
    ChVisualSystemIrrlicht vis;
    vis.SetWindowSize(1024, 768);
    vis.SetWindowTitle("ChronoSolidworksImportCPP");
    vis.Initialize();
    vis.AddLogo();
    vis.AddSkyBox();
    vis.AddTypicalLights();
    vis.AddCamera(ChVector3d(2, 2, 2), ChVector3d(0, 0, 0));
    vis.AttachSystem(&sys);

    vis.EnableCollisionShapeDrawing(true);


    // Simulation loop
    ChRealtimeStepTimer realtime_timer;
    double timestep = 0.01;

    sys.SetSolverType(ChSolver::Type::BARZILAIBORWEIN);
    sys.GetSolver()->AsIterative()->SetMaxIterations(400);

    while (vis.Run()) {
        // Render scene
        vis.BeginScene();
        vis.Render();
        vis.EndScene();

        // Perform the integration step
        sys.DoStepDynamics(timestep);

        // Spin in place to maintain soft real-time
        realtime_timer.Spin(timestep);
    }

    return 0;
}
